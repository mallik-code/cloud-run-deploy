------------------------Deploy to Local Docker------------------------

Prerequisites:
-------------
1. Install Docker Desktop:
   - Download from: https://www.docker.com/products/docker-desktop/
   - Verify installation: docker --version
   - Ensure Docker Desktop is running (check system tray icon)

2. Python Environment Setup (for local testing):
   - Python 3.11 or later installed
   - Required packages: flask, gunicorn (listed in requirements.txt)

Local Docker Deployment Steps:
----------------------------
1. Build the Docker Image:
   - Open terminal in project root directory
   - Build command: docker build -t cloud-run-deploy .
   - This will:
     * Use Python 3.11 slim base image
     * Install dependencies from requirements.txt
     * Copy application code
     * Configure Gunicorn server

2. Verify the Build:
   - List images: docker images
   - You should see 'cloud-run-deploy' in the list
   - Check image details: docker inspect cloud-run-deploy

3. Run the Container:
   
   a) Default port (8080):
      docker run -p 8080:8080 cloud-run-deploy

   b) Custom host port (host:5000 -> container:8080):
      docker run -p 5000:8080 cloud-run-deploy

   c) Custom container port with environment variable:
      docker run -e PORT=3000 -p 3000:3000 cloud-run-deploy

   d) With environment variables and default port:
      docker run -p 8080:8080 -e PYTHONUNBUFFERED=1 cloud-run-deploy

   e) Run in detached mode with custom port:
      docker run -d -p 5000:8080 --name cloud-run-deploy cloud-run-deploy

   f) Run with resource limits and custom port:
      docker run -p 5000:8080 --memory=512m --cpus=".5" cloud-run-deploy

   Access URLs:
   - http://localhost:8080 (when using default port)
   - http://localhost:5000 (when mapped to port 5000)
   - http://localhost:3000 (when using PORT=3000)

4. Test the Application:
   - Access via browser: http://localhost:8080
   - Expected response: JSON with greeting and hostname
   - Check logs: docker logs cloud-run-deploy
   - Interactive shell: docker exec -it cloud-run-deploy /bin/bash

Container Management:
-------------------
1. View running containers:
   docker ps

2. Stop the container:
   docker stop cloud-run-deploy

3. Remove the container:
   docker rm cloud-run-deploy

4. Remove the image:
   docker rmi cloud-run-deploy

Troubleshooting:
---------------
1. Port conflicts:
   - Error: "port is already allocated"
   - Solution: 
     * Check running containers: docker ps
     * Stop conflicting container or use different port:
       docker run -p 8081:8080 cloud-run-deploy

2. Build failures:
   - Clean Docker cache: docker builder prune
   - Rebuild with no cache: docker build --no-cache -t cloud-run-deploy .

3. Container crashes:
   - Check logs: docker logs cloud-run-deploy
   - Interactive debug: docker run -it cloud-run-deploy /bin/bash
   - Check resource usage: docker stats

Using Docker Compose (Recommended):
-----------------------------
1. Overview:
   - docker-compose.yml is provided for orchestrating containers
   - Environment-specific configurations (.env.dev, .env.staging, .env.prod)
   - Supports multiple services (web, database, cache, monitoring)
   - Defines resource limits and health checks

2. Environment-Based Deployment:
   a) Development Environment:
      docker-compose up -d --build

   b) Staging Environment:
      ENV=staging docker-compose up -d --build

   c) Production Environment:
      ENV=prod TAG=v1.0 docker-compose up -d --build

   d) Custom Port (any environment):
      HOST_PORT=5000 ENV=staging docker-compose up -d --build

3. Basic Docker Compose Commands:
   - View logs:
     docker-compose logs -f
     For specific service:
     docker-compose logs -f web

   - Stop services:
     docker-compose down
     With volumes:
     docker-compose down -v

   - Check status:
     docker-compose ps

4. Environment Files:
   - .env.dev: Development settings
   - .env.staging: Staging settings
   - .env.prod: Production settings

   Each environment file contains:
   - HOST_PORT: Container external port
   - ENV: Environment name
   - TAG: Docker image tag
   - DEBUG: Debug mode setting
   - Other environment-specific variables

3. Development with Docker Compose:
   - Environment variables are configured in docker-compose.yml
   - Resource limits are pre-configured (CPU and Memory)
   - Health checks are implemented for reliability
   - Network isolation is configured via app-network
   - Persistent volumes are defined for data storage

4. Adding New Services:
   - Edit docker-compose.yml
   - Uncomment desired service (db, cache, monitoring)
   - Configure service-specific environment variables
   - Run docker-compose up -d to apply changes

5. Resource Management:
   - CPU and memory limits are predefined
   - Monitor resources: docker-compose top
   - Scale services: docker-compose up -d --scale web=2
     (Note: Adjust ports for scaling)

6. Development Tips:
   - Real-time code changes with volumes:
     Uncomment volume mounts in docker-compose.yml
   - Use docker-compose.override.yml for local-only changes
   - Set DEBUG=1 in environment for development mode

Notes:
------
- The container uses port 8080 internally (configured in Dockerfile)
- Gunicorn is used as the production server
- All logs are directed to stdout/stderr
- The application is stateless and can be safely stopped/started
- Container restarts: Use --restart=always for auto-restart on failure
