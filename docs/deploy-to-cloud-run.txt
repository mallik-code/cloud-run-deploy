------------------------Deploy to GCP Cloud Run------------------------

Prerequisites:
-------------
1. Install and set up the following tools:
   - Google Cloud SDK (gcloud CLI): https://cloud.google.com/sdk/docs/install
   - Docker Desktop: https://www.docker.com/products/docker-desktop/
   - Python 3.11 or later

2. Configure Google Cloud:
   - Run 'gcloud auth login' and follow authentication steps
   - Run 'gcloud config set project YOUR_PROJECT_ID'
   - Enable required APIs:
     * Cloud Run API
     * Cloud Build API
     * Artifact Registry API

3. Create an Artifact Registry repository (one-time setup):
   - Run: gcloud artifacts repositories create cloud-run-deploy \
         --repository-format=docker \
         --location=us-central1 \
         --description="Docker repository for Cloud Run deployments"

Deployment Steps:
----------------
1. Make code changes and test locally:
   - Install dependencies: pip install -r requirements.txt
   - Run locally: python src/main.py
   - Test at: http://localhost:8080
   - The app should return a JSON response with a greeting and hostname

2. Build the Docker image locally:
   - Command: docker build -t cloud-run-deploy .
   - Test the container:
     * Run: docker run -p 8080:8080 cloud-run-deploy
     * Test at: http://localhost:8080
     * Stop with: Ctrl+C

3. Submit (Upload) the Docker image to Artifact Registry:
   - Replace $PROJECT_ID with your actual GCP Project ID
   - Command: gcloud builds submit --tag us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/cloud-run-deploy

4. Deploy to Cloud Run:

   a) Build for deployment:
      # Production build
      ENV=prod TAG=v1.0 docker-compose build

      # Staging build
      ENV=staging TAG=staging docker-compose build

   b) Tag for Cloud Run:
      # Production version
      docker tag cloud-run-deploy:v1.0 us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/cloud-run-deploy:v1.0

      # Staging version
      docker tag cloud-run-deploy:staging us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/cloud-run-deploy:staging

   c) Submit to Cloud Run:
      # Production version
      gcloud builds submit --tag us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/cloud-run-deploy:v1.0

      # Staging version
      gcloud builds submit --tag us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/cloud-run-deploy:staging

   d) Deploy to Cloud Run:
      # Production deployment
      gcloud run deploy cloud-run-deploy-prod-service \
          --image us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/cloud-run-deploy:v1.0 \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars-file .env.prod

      # Staging deployment
      gcloud run deploy cloud-run-deploy-staging-service \
          --image us-central1-docker.pkg.dev/$PROJECT_ID/cloud-run-deploy/cloud-run-deploy:staging \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars-file .env.staging

   Parameters explained:
   - cloud-run-deploy-python-service: Name of your Cloud Run service
   - --platform managed: Uses fully managed Cloud Run service
   - --region us-central1: Deploys in the US Central region
   - --allow-unauthenticated: Makes the service publicly accessible
   - --port: Sets the container's internal port (default: 8080)
   - --set-env-vars: Sets environment variables for the container

   Note: Cloud Run automatically handles external HTTPS (port 443) regardless of internal port

5. After Deployment:
   - The command will output the service URL
   - Test your deployed service by visiting the URL
   - Monitor the service in Google Cloud Console under Cloud Run

Notes:
------
- The application uses Flask and Gunicorn for production deployment
- The container runs on port 8080 as required by Cloud Run
- Environment variables:
  * PORT: Set automatically by Cloud Run
  * PYTHONUNBUFFERED=1: Ensures proper logging
- The service is stateless and scalable
- Authentication can be added by removing --allow-unauthenticated flag
