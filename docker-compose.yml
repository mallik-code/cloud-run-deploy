version: '3.8'

# Define custom networks for container communication
networks:
  app-network:
    driver: bridge

# Define volumes for persistent data
volumes:
  app-data:  # For future persistent storage needs

services:
  # Main web application
  web:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        # Build-time variables if needed
        - BUILD_ENV=development
      # Cache from previous builds for faster builds
      cache_from:
        - cloud-run-deploy:latest
    image: cloud-run-deploy:${TAG:-latest}
    container_name: cloud-run-deploy-${ENV:-dev}
    ports:
      - "${HOST_PORT:-8080}:8080"
    environment:
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=${ENV:-development}
      # Add other environment variables as needed
      # - DATABASE_URL=${DATABASE_URL}
      # - REDIS_URL=${REDIS_URL}
    env_file:
      - .env.${ENV:-dev}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Example Database Service (Commented out - uncomment and configure as needed)
  # db:
  #   image: postgres:15-alpine
  #   container_name: app-db
  #   volumes:
  #     - app-data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=appdb
  #     - POSTGRES_USER=appuser
  #     - POSTGRES_PASSWORD=apppassword
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped

  # Example Cache Service (Commented out - uncomment and configure as needed)
  # cache:
  #   image: redis:7-alpine
  #   container_name: app-cache
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped

  # Example Monitoring Service (Commented out - uncomment and configure as needed)
  # monitoring:
  #   image: prom/prometheus:latest
  #   container_name: app-monitoring
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - app-network
  #   restart: unless-stopped